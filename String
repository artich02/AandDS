#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;

class String{
    
    char * buffer = NULL;
    int size = 0;
    
    String(int _size): buffer(new char[_size]), size(_size-1) {}
        
    public:
    String(const String & str): 
        buffer(new char[str.size + 1]), size(str.size)
    {
        strcpy(buffer, str.buffer);
    }
    
    String() = default;
    String(const char * p) :
            buffer(new char[strlen(p) + 1]), size(strlen(p))
    {
        strcpy(buffer, p);
    }
    ~String(){
        delete [] buffer;
    }
    
    char & operator[](int i) {
        if(i < 0 || i >= size) exit(1);
        return buffer[i];
    }
    
    const char & operator[](int i) const {
        if(i < 0 || i >= size) exit(1);
        return buffer[i];
    }
    
    String &  operator=(const String & str) {
        if(this != &str){
            if(size < str.size){
                delete [] buffer;
                buffer = new char[str.size + 1];     
            }
            strcpy(buffer, str.buffer);
            size = str.size;
        }
        return *this;
    }
    
    String  operator+(const String & str) const {
        String sum(size + str.size + 1);          
        strcpy(sum.buffer , buffer); 
        strcat(sum.buffer , str.buffer);
        return sum;    
    }
    
    String & operator+=(const String & str) {
        size = size + str.size;
        char * new_buffer = new char[size + 1];    
        strcpy(new_buffer, buffer);
        strcat(new_buffer, str.buffer);
        delete [] buffer;
        buffer = new_buffer;
        return *this;
    }
    
    bool operator==(const String & str) const {
            return  strcmp(buffer, str.buffer) == 0;   
    }
    bool operator!=(const String & str) const {
            return  strcmp(buffer, str.buffer) != 0;    
    }
    bool operator>(const String & str) const {
            return  strcmp(buffer, str.buffer) > 0;    
    }
    bool operator<(const String & str) const {
            return  strcmp(buffer, str.buffer) < 0;     
    }
    
friend ostream& operator<<(ostream & out, const String & str){
    if(str.size == 0) printf("The string is empty");
    else printf("string='%s' size=%d", str.buffer, str.size);
    return out;
}

friend istream & operator>>(istream & in, String & str){
        
        delete [] str.buffer;
        int i = 0, size = 10;
        char ch;
        char * new_buffer = new char[size];
        while( (ch = getc(stdin)) != '\n'){
                  
            if(i == size - 1){
                new_buffer[i] = '\0';
                str.buffer = new_buffer;
                new_buffer = new char[size *= 2];
                strcpy(new_buffer, str.buffer);
                delete [] str.buffer;
            }     
            new_buffer[i++] = ch;
        } 
        new_buffer[i] = '\0';
        str.buffer = new_buffer;
        str.size = i; 
        return in;
}

};

int main()
{
    /*
  String str1 = "ABCDEF";
  cout<<str1[2]<<endl;
  String str2("Hello world");
  String str3 = str2; 
  str2[4] = 'A';
  cout<<str2<<endl;
  
  str2 = str1;
  str1[0] = 'X';
  cout<<str2;
  */
  
  /*
  String str1 = "ABCDE";
  String str2 = "Hello";
    str1+=str2;
    cout<<str1;
 */
 
 String str1 = "ABCDE";
 
 cin>>str1; // sdfd srfsn asdfj sddf 
 cout<<str1;
  return 0;
}
